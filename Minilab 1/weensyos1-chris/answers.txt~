Name: Chris Laganiere
UCLA ID: 404-300-154

-------------------------------------------------------------------------------

Response to Exercise 1:
Yes. If you replaced run(current) in INT_SYS_GETPID with schedule(), the correct pid value will be returned.
When schedule() is called, some other process will take over and overwrite the %eax register, which stores the return value in this OS. However, the correct value for this register gets stored to the process descriptor right before schedule() is called, and when the current process eventually returns and is run again, the correct exit value is again written to the %eax register, so the correct value is returned.


Anything else you'd like us to know:



Extra credit exercises:

5. the following implementation would print "10" on a correctly isolated system, but will print "11" on MiniprocOS, because t
void
start(void) {
  int x = 0; // on the stack
  int *volatile p_x = &x; // will be parent's value of x
  volatile int *c_x = &x; // will be child's value of x
  pid_t p = sys_fork();
  if (p == 0) {
    // child process -> will change parent's value in miniOS
    p_x = &x;
    c_x = &x;
    *p_x = 1;
    *c_x = 1;
  } else if (p > 0) {
    // parent process -> should be isolated! but still will have stack var changed by child in miniOS
    sys_wait(p); // assume blocking
  }
  app_printf("%d", x);
  sys_exit(0);
}
