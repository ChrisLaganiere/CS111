Name: Chris Laganiere
UCLA ID: 404300154

Collaborators:

-------------------------------------------------------------------------------

Response to Exercise 1:

The name of the scheduling algorithm is: Round-robin. This algorithm just loops through the processes in order by pid (1234....1234)


(Exercise 2 is a coding exercise)
I implemented exercise 2 so that pids represent priorities of the processes, with smaller pids being higher priorities. I just find the process with the smallest pid which is still runnable and run that.
I changed schedule() in schedos-kern.c to implement the scheduling algorithm and modified start() in schedos-1.c to actually exit when it finishes.
The output is 111...1222...2333...3444...4 as expected


Response to Exercise 3:

Average turnaround time for scheduling_algorithm 0: ((4*320) + (4*320 - 1) + (4*320 - 2) + (4*320 - 3))/4 = 1278.5 milliseconds
Average turnaround time for scheduling_algorithm 1: (4*320 + 3*320 + 2*320 + 1*320)/4 = 800 milliseconds

Average wait time for scheduling_algorithm 0: (0 + 1 + 2 + 3)/4 = 1.5 milliseconds
Average wait time for scheduling_algorithm 1: (0 + 320 + 640 + 960)/4 = 480 milliseconds


Exercise 4:

Did you complete Exercise 4A, Exercise 4B, or both for extra credit?

Both!

I did Exercise 4A by setting up schedule() in schedos-kern.c to prioritize according to a new variable in the process_t struct in schedos-kern.h, p_priority, which is the priority of the process. I also implemented a new interrupt INT_SYS_USER1 in interrupt() in schedos-kern.c and proc_priority() in schedos-app.h to allow processes to set their own priorities.
I tested this by having each process initialize with priority 5 and in start() setting their priority to 2, 2, 4, and 3 respectively such that output was sorted by priorities correctly (like 333...3444...41212...1212). You can see this happen if you set scheduling_algorithm to 2.

I did Exercise 4B by implementing a new scheduling algorithm 3: priority shares. I added two new variables to the process_t struct, p_share (share for the process) and p_share_used (amount of the share used so far), in schedos-kern.h.
These new variables are used in schedule() in schedos-kern.c to prioritize processes according to the shares alloted to them.
I also implemented a new system call proc_share() in schedos-app.h to allow a process to set its own share priority.
I changed schedos-1.c to use this new system call to set its share equal to the same constant as the priorities in Exercise 4A: 2, 2, 4, and 3.
So the output is as expected: 11223333444....11223333444 (after the initializing cycles, until the processes reach their goal of 320 characters, when they stop printing.)


Exercise 5: The first timer interrupt I can see in the spec's output happens after 19 characters are printed.
The '4' is missing after this '3', indicating that a timer interrupt interrupted process 4 between setting the character in cursorpos and incrementing cursorpos, such that the next process scheduled overwrites the character that process 4 printed and the number '4' is skipped. This occurs 1234123412341234123[here!]1


(Exercise 6 is a coding exercise)
I implemented a lock using atomic_swap so that both operations represented by *cursorpos++ = PRINTCHAR; occur within a critical section.
Each process spins in a loop until 0 is returned by atomic_swap with lock, so that only one process can print a character and increment the cursorpos at a time.
There are no more skipped characters so the output is again 4*320 characters long. The numbers are not all in order because the timer interrupt still interrupts them often, but no longer are characters skipped due to the race condition in the spec.
I changed start() in schedos-1.c to use atomic_swap with a lock, which I defined in schedos.h and globally in schedos-symbols.ld. I also initialize this lock to '0' in start() in schedos-kern.c.


Anything else you'd like us to know:



Extra credit exercises:

Exercise 8: I implemented another synchronization mechanism: a system call for printing a character. I created a new system call function, proc_print() in schedos-app.h. This uses a new interrupt key which is handled in schedos-kern.c
I set up schedos-1.c to work with either synchronization mechanism according to a preprocessor symbol, USE_SYSTEM_SYNC, which is defined (or not) in schedos.h.
If USE_SYSTEM_SYNC is commented out, the synchronization mechanism from exercise 6 with a lock is used. If it is uncommented and defined, then only the system call synchronization mechanism is used.
In either case, the total output is 4*320 characters and the race conditioned is gone.
