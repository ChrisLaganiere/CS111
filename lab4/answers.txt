# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Chris Laganiere
Student ID: 404300154
Email: chrislaganiere@ucla.edu

# Partner 2 (if you're working in a team)
Name: Juan Caesar Susilo
Student ID: 004282294
Email: juanuni95@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used process forking to download and upload files in parallel. For every file requested for download, a new process is forked, which begins downloading the file from any available peers. When all forked download processes finish (successfully or not) and exit, uploads begin in parallel, again by forking a new process for every upload request. This is done with waitpid given the parameter WNOHANG, so that it doesn't waste CPU time while waiting for upload requests.
All this is implemented in the main() function.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
We found that the strcpy function can unintentionally corrupt memory due to buffer overrun. This can be triggered by having an excessively long filename argument, and can result in a program crash or even a malicious buffer overflow attack by exploiting the overrun. We prevent this by making sure that no filename is longer than the allotted space, using strncpy to copy only the maximum allotted characters at most into the struct's filename.
We used this technique in start_download() to set up new tasks for download, in task_download() when copying a task's filename to disk_filename, just to be safe.
Similarly, the length of the task filename is checked in task_upload() before uploading begins, to avoid any buffer overflows.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
We prevented bad peers from sending excessively large files (and thus exhausting our resources). In our case, we limited the size of the file to 132072 bytes (enough for the cat pictures) in task_download().
We also checked for requests for file uploads for files which do not exist or are in another directory other than /test. This would be unsecure as a malicious attacker could steal data. We do this by finding the path of files requested for upload and comparing this to make sure it contains the current working directory (and is a subdirectory), in task_upload().
We also check for connections which don't actually transfer any data, or do slow too slowly, as these waste resources. If files downloading from another peer do not meet a minimum transfer rate, the connection is closed. This is implemented in task_download() by saving an array of the difference between total bytes written in each iteration of a while loop. If the sum of this array is not at least a minimum value, the connection is deemed to slow and dropped.
We also check for peers that keep connecting over and over in an attack, by preventing more than some defined max number of upload connections in main(). This prevents the program from being overloaded with a DOS style attack.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
We implemented 3 different evil_mode attacks:
1. filename buffer overflow attack: attempt to crash the other peer's program by overrunning their buffer for filename. This is implemented in task_download(), where the filename is set to several times the max size of the buffer.
This is not handled by the skeleton code and will crash the program, so it's a valid attack.
2. many connections attack: connect over and over again to a peer who is uploading a file. This is implemented in task_download(), where a while loop keeps creating new connections until the other peer can't respond anymore. This would crash the skeleton code, which makes no protections against this kind of attack, so again it is a valid attack.
3. endless upload data file attack: overload the downloading peer by giving them endless data. This is implemented in task_upload(), where the file being sent to the other peer keeps getting reset until they stop responding.
The skeleton code would just keep downloading the file until it ran out of space, so this attack is pretty serious.
Our implementation guards against all 3 of these attacks.

# Extra credit problems
Extra credit problem: File Integrity with MD5 checksum.
We implemented file checking by requesting a checksum from the tracker for each file before it starts downloading, with MD5SUM [filename]. If returned from the server, this value is saved to a new property in the task struct. 
When a file finishes downloading, if we have the checksum returned from the server, then a confirmation checksum is calculated for the file by using md5_init, md5_append, and md5_finish_text(...,1). This is implemented in start_download() and task_download().

# Add any other information you'd like us to know below this line.
